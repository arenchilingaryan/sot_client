{"version":3,"sources":["components/auth/auth/registration.tsx","hooks/http.hook.js"],"names":["memoComponent","useHttp","loading","request","error","history","useHistory","useState","type","setType","nickName","email","password","phone","location","form","setForm","useEffect","axios","get","then","res","data","geoplugin_city","passwordViewHandler","changeHandler","event","target","name","value","registerHandler","a","preventDefault","push","className","itemScope","itemType","itemProp","style","display","onSubmit","htmlFor","onChange","onClick","country","phoneNumber","disabled","setLoading","setError","useCallback","url","method","body","headers","JSON","stringify","fetch","response","json","ok","Error","message","clearError"],"mappings":"iRAqHeA,uBAzGgB,WAAO,IAAD,EACGC,cAA5BC,EADyB,EACzBA,QAASC,EADgB,EAChBA,QAASC,EADO,EACPA,MAEpBC,EAAUC,cAHiB,EAKTC,oBAAkB,GALT,mBAK1BC,EAL0B,KAKpBC,EALoB,OAMTF,mBAAwB,CAC5CG,SAAU,GACVC,MAAO,GACPC,SAAU,GACVC,MAAO,GACPC,SAAU,KAXmB,mBAM1BC,EAN0B,KAMpBC,EANoB,KAcjCC,qBAAU,WACNC,IAAMC,IAAI,gCAAgCC,MAAK,SAAAC,GAC3CL,EAAQ,2BAAKD,GAAN,IAAYD,SAAUO,EAAIC,KAAKC,uBAE3C,IAGH,IAAMC,EAAsB,kBAAMf,GAASD,IAErCiB,EAAgB,SAACC,GACnBV,EAAQ,2BAAKD,GAAN,kBAAaW,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAGnDC,EAAe,uCAAG,WAAOJ,GAAP,SAAAK,EAAA,6DACpBL,EAAMM,iBADc,kBAGG7B,EAAQ,qBAAsB,OAAvB,eAAoCY,IAH9C,eAKZV,EAAQ4B,KAAK,UALD,yGAAH,sDAgBrB,OACI,yBAAKC,UAAU,QACX,yBAAKC,WAAS,EAACC,SAAS,mCAAmCF,UAAU,kBACjE,6BACI,wBAAIG,SAAS,QAAb,aAEJ,yBAAKH,UAAU,eAAeI,MAAOlC,EAAQ,CAAEmC,QAAS,SAAY,CAAEA,QAAS,SAC1EnC,GAEL,0BAAM8B,UAAU,cAAcM,SAAUV,GACpC,2BAAOW,QAAQ,SAAf,aACA,2BAAOP,UAAU,eACbQ,SAAUjB,EACVG,KAAK,aACT,2BAAOa,QAAQ,SAAf,UACA,2BAAOP,UAAU,eACbG,SAAS,SACTK,SAAUjB,EACVG,KAAK,UACT,yBAAKM,UAAU,qBACX,kBAAC,IAAD,CACII,MAAO9B,EAAO,CAAE+B,QAAS,SAAY,CAAEA,QAAS,QAChDL,UAAU,oBACVS,QAASnB,IAEb,kBAAC,IAAD,CACIc,MAAO9B,EAAO,CAAE+B,QAAS,QAAW,CAAEA,QAAS,SAC/CL,UAAU,sBACVS,QAASnB,IAEb,2BAAOiB,QAAQ,YAAf,aACA,2BAAOP,UAAU,eACbQ,SAAUjB,EACVjB,KAAMA,EAAO,OAAS,WACtBoB,KAAK,cAEb,2BAAOa,QAAQ,UAAf,UACA,kBAAC,IAAD,CACIG,QAAS,KACTF,SA3CC,SAACG,GAClB7B,EAAQ,2BAAKD,GAAN,IAAYF,MAAOgC,QA6Cd,yBAAKX,UAAU,eAEPhC,EACM,kBAAC,IAAD,MACA,4BACEmC,SAAS,kBACTH,UAAU,gBACVY,SAAU5C,EACVyC,QAASb,GAJX,mB,8GCnGrB7B,EAAU,WAAO,IAAD,EACKM,oBAAS,GADd,mBAClBL,EADkB,KACT6C,EADS,OAECxC,mBAAS,MAFV,mBAElBH,EAFkB,KAEX4C,EAFW,KA8BzB,MAAO,CAAE9C,UAASC,QA3BF8C,sBAAW,uCAAC,WAAOC,GAAP,mCAAAnB,EAAA,6DAAYoB,EAAZ,+BAAqB,MAAOC,EAA5B,+BAAmC,KAAMC,EAAzC,+BAAmD,GAC3EN,GAAW,GADa,SAGhBK,IACAA,EAAOE,KAAKC,UAAUH,GACtBC,EAAQ,gBAAkB,oBALV,SAQGG,MAAMN,EAAK,CAAEC,SAAQC,OAAMC,YAR9B,cAQdI,EARc,iBASDA,EAASC,OATR,WASdpC,EATc,OAWfmC,EAASE,GAXM,uBAYV,IAAIC,MAAMtC,EAAKuC,SAAW,aAZhB,eAepBd,GAAW,GAfS,kBAiBbzB,GAjBa,wCAmBpByB,GAAW,GACXC,EAAS,KAAEa,SApBS,+DAAD,sDAuBxB,IAIwBzD,QAAO0D,WAFf,kBAAMd,EAAS,U","file":"static/js/13.8c641d77.chunk.js","sourcesContent":["import React, { useState, useEffect, SyntheticEvent, useMemo } from 'react'\nimport { EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons'\nimport { useHttp } from '../../../hooks/http.hook'\nimport { IRegisterForm } from '../../../interfaces/interfaces'\nimport { useHistory } from 'react-router'\nimport PhoneInput from 'react-phone-input-2'\nimport 'react-phone-input-2/lib/style.css'\nimport axios from 'axios'\nimport { Spinner } from '../../spinner/spinner'\nimport { memoComponent } from '../../../hooks/memo.component';\nimport './login.scss'\n\nconst Registration: React.FC = () => {\n    const { loading, request, error } = useHttp()\n\n    const history = useHistory()\n\n    const [type, setType] = useState<boolean>(false)\n    const [form, setForm] = useState<IRegisterForm>({\n        nickName: '',\n        email: '',\n        password: '',\n        phone: '',\n        location: ''\n    })\n\n    useEffect(() => {\n        axios.get('http://geoplugin.net/json.gp').then(res => {\n            setForm({ ...form, location: res.data.geoplugin_city })\n        })\n    }, [])\n\n\n    const passwordViewHandler = () => setType(!type)\n\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setForm({ ...form, [event.target.name]: event.target.value })\n    }\n\n    const registerHandler = async (event: SyntheticEvent) => {\n        event.preventDefault()\n        try {\n            const data = await request('/api/auth/register', 'POST', { ...form })\n            if (data) {\n                history.push('/login')\n            }\n        } catch (e) {\n\n        }\n    }\n\n    const phoneHandler = (phoneNumber: string) => {\n        setForm({ ...form, phone: phoneNumber })\n    }\n\n    return (\n        <div className=\"page\">\n            <div itemScope itemType=\"http://schema.org/RegisterAction\" className=\"register__form\">\n                <div>\n                    <h1 itemProp=\"name\">Register</h1>\n                </div>\n                <div className=\"login__error\" style={error ? { display: 'block' } : { display: 'none' }}>\n                    {error}\n                </div>\n                <form className=\"login__form\" onSubmit={registerHandler}>\n                    <label htmlFor=\"email\">Username:</label>\n                    <input className=\"login__input\"\n                        onChange={changeHandler}\n                        name=\"nickName\" />\n                    <label htmlFor=\"email\">Email:</label>\n                    <input className=\"login__input\"\n                        itemProp=\"sameAs\"\n                        onChange={changeHandler}\n                        name=\"email\" />\n                    <div className=\"login__input-line\">\n                        <EyeOutlined\n                            style={type ? { display: \"block\" } : { display: \"none\" }}\n                            className=\"password-eye-open\"\n                            onClick={passwordViewHandler}\n                        />\n                        <EyeInvisibleOutlined\n                            style={type ? { display: \"none\" } : { display: \"block\" }}\n                            className=\"password-eye-closed\"\n                            onClick={passwordViewHandler}\n                        />\n                        <label htmlFor=\"password\">Password:</label>\n                        <input className=\"login__input\"\n                            onChange={changeHandler}\n                            type={type ? \"text\" : \"password\"}\n                            name=\"password\" />\n                    </div>\n                    <label htmlFor=\"number\">Phone:</label>\n                    <PhoneInput\n                        country={'us'}\n                        onChange={phoneHandler}\n                    />\n\n                    <div className=\"login__btns\">\n                        {\n                            loading\n                                ? <Spinner />\n                                : <button\n                                    itemProp=\"potentialAction\"\n                                    className=\"login__button\"\n                                    disabled={loading}\n                                    onClick={registerHandler}\n                                >\n                                    Sign Up</button>\n                        }\n\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default memoComponent(Registration)","import { useState, useCallback } from 'react'\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(null)\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setLoading(true)\n        try {\n            if (body) {\n                body = JSON.stringify(body)\n                headers['Content-Type'] = 'application/json'\n            }\n\n            const response = await fetch(url, { method, body, headers })\n            const data = await response.json()\n\n            if (!response.ok) {\n                throw new Error(data.message || 'Try again')\n            }\n\n            setLoading(false)\n\n            return data\n        } catch (e) {\n            setLoading(false)\n            setError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError = () => setError(null)\n\n    return { loading, request, error, clearError }\n}"],"sourceRoot":""}